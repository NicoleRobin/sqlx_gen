// Code generated by sqlx_gen. DO NOT EDIT.

package test

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tSqlxGenFieldNames          = builder.RawFieldNames(&TSqlxGen{})
	tSqlxGenRows                = strings.Join(tSqlxGenFieldNames, ",")
	tSqlxGenRowsExpectAutoSet   = strings.Join(stringx.Remove(tSqlxGenFieldNames), ",")
	tSqlxGenRowsWithPlaceHolder = strings.Join(stringx.Remove(tSqlxGenFieldNames, ""), "=?,") + "=?"
)

type (
	tSqlxGenModel interface {
		Insert(ctx context.Context, data *TSqlxGen) (sql.Result, error)
		FindOne(ctx context.Context) (*TSqlxGen, error)
	}

	defaultTSqlxGenModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TSqlxGen struct {
	}
)

func newTSqlxGenModel(conn sqlx.SqlConn) *defaultTSqlxGenModel {
	return &defaultTSqlxGenModel{
		conn:  conn,
		table: "t_sqlx_gen",
	}
}

func (m *defaultTSqlxGenModel) FindOne(ctx context.Context) (*TSqlxGen, error) {
	query := fmt.Sprintf("select %s from %s where  = ? limit 1", tSqlxGenRows, m.table)
	var resp TSqlxGen
	err := m.conn.QueryRowCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTSqlxGenModel) Insert(ctx context.Context, data *TSqlxGen) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ()", m.table, tSqlxGenRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query)
	return ret, err
}

func (m *defaultTSqlxGenModel) tableName() string {
	return m.table
}
